#snake game

#----------------------------
#screen set up
import turtle
import time
import random

#----------------------------
#Screen
delay = 0.1

#Score
score = 0 
high_score = 0

wn = turtle.Screen()
wn.title("Snake Game")
wn.bgcolor("green")
wn.setup(width =600, height = 600)
wn.tracer(0)
#----------------------------

#snake head setup
head = turtle.Turtle()
head.speed(0)
head.shape("square")
head.color("black")
head.penup()
head.goto(0,0)
head.direction = "stop"

#----------------------------

#snake food

food = turtle.Turtle()
food.speed(0)
food.shape("circle")
food.color("red")
food.penup()
food.goto(0,100)

#----------------------------

#snake body

segments = []

#pen
pen = turtle.turtle()
pen.speed(0)
pen.shape("square")
pen.color("white")
pen.penup()
pen.hideturtle(0,260)
pen.write("Score : 0 High Score: 0", align = "center", font = ("courier", 24, "normal"))

#----------------------------

#function 

def go_up():
    if head.direction != "down"
        head.direction = "up"
    
def go_down():
    if head.direction != "up"
        head.direction = "down"
    
def go_left():
    if head.direction!= "right"
        head.direction = "left"
    
def go_right():
    if head.direction != "left"
        head.direction = "right"
    
def move():
    if head.direction == "up":
        y = head.ycord()
        head.sety(y + 20)
        
    if head.direction == "down":
        y = head.ycord()
        head.sety(y - 20)
        
    if head.direction == "left":
        y = head.ycord()
        head.setx(x - 20)
        
    if head.direction == "right":
        y = head.ycord()
        head.setx(y + 20)
#----------------------------
#keyboard bindings

wn.listen()
wn.onkeypress(go_up,"w")
wn.onkeypress(go_down,"s")
wn.onkeypress(go_left,"a")
wn.onkeypress(go_right,"d")

#----------------------------
# Main game mainloop
while True:
    wn.update()
    
    #check for a collision with the border
    if head.xcor() > 290 or head.xcor <- 290 or head.ycor > 290 or head.ycor <- 290:
        time.sleep(1)
        head.goto(0,0)
        head.direction = "stop"
        
        # Hide the segments
        
        for segment in segment:
            segment.goto(1000,1000)
        
        #clear the segments list
        segments.clear()
        
        #reset delay
        delay = 0.1
        
        #reset the score
        score = 0 
        
        pen.clear()
        pen.write("Score: {}  High SCore:".format(score,high_score), align = "center", font =("Courier", 24, "normal"))
   
    # check for a collision with food
    
    
    
    if head.distance(food) < 20:
        
        #move the food to random spot
        
        x = random.randint(-290,290)
        y = random.randint(-290,290)
        food.goto(x,y)
        
        #add a segement in snake body
        
        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.shape("square")
        new_segment.color("grey")
        new_segment.penup
        segements.append(new_segment)
        
        # shorten the delay
        delay -= .001
        
        #reset the delay
        
        delay = 0.1
        
        #increase the score
        
        score +=10
        
        if the score > high_score:
            high_score = score
            
        pen.clear()
        pen.write("Score: {}  High SCore:".format(score,high_score), align = "center", font =("Courier", 24, "normal"))
        
        #move the end segments first in reverse order
        
        for index in range(len(segments) -1, 0, -1):
            x = segments[index - 1].xcor()
            y = segments[index - 1].ycor()
            segments[index].goto(x, y)
            
        #move segment 0 is where the head is
        
        if len(segments) > 0:
            x = head.xcor()
            y = head.ycor()
            segments[0].goto(x,y)
    
    move()
    
    #check for head collision with body segments
    
    for segment in segments:
        if segment.distance(head) < 20:
            time.sleep(1)
            head.goto(0,0)
            head.direction = "stop"
            
         # Hide the segments
        for segment in segment:
            segment.goto(1000,1000)
            
        #clear the segment liste
        segments.clear()
        
        #reset the score
        score = 0 
        
        pen.clear()
        pen.write("Score: {}  High SCore:".format(score,high_score), align = "center", font =("Courier", 24, "normal"))

    time.sleep(delay)

wn.mainloop()
